<h2>CSS</h2>
<hr>

<ul class="vertical lined">
  <li>
    <ul class="bulleted">
      <li>Use soft-tabs with two spaces</li>
      <li>When grouping selectors, keep individual selectors to a single line</li>
      <li>Include one space before the opening brace of declaration blocks</li>
      <li>Place closing braces of declaration blocks on a new line</li>
      <li>Include one space after <code>:</code> in each property</li>
      <li>Each declaration should appear on its own line</li>
      <li>End all declarations with a semi-colon</li>
      <li>Comma-separated values should include a space after each comma</li>
      <li>Don't include spaces after commas in RGB or RGBa colors</li>
      <li>Do not specify units for zero values, e.g., margin: 0; instead of margin: 0px;</li>
      <li>Lowercase all hex values, e.g., #fff instead of #FFF</li>
      <li>Use shorthand hex values where available, e.g., #fff instead of #ffffff</li>
      <li>Quote attribute values in selectors, e.g., input[type="text"]</li>
    </ul>
  </li>
  <li>
    <h5>Declaration Organization</h5>

    <ol>
      <li>Box (Display, Float, Position, Left, Top, Width, Height, Margin, Padding, etc.)</li>
      <li>Border</li>
      <li>Background</li>
      <li>Text</li>
      <li>Other</li>
    </ol>

  </li>
  <li>
    <h5>General Formatting</h5>

    <p>Use a new line for every block, list or table element, and indent every such child element to show heirarchy and improve understanding</p>

  </li>
  <li>
    <p>Avoid Qualifying ID and class names with type selectors</p>
    <p>p.s. ID's are bad for CSS, only use ID's for javascript hooks when necessary</p>
  </li>
  <li>
    <h5>Hexadecimal Notation</h5>

    <p>For color values that permit, 3 character hexadecimal is preferred</p>
  </li>
  <li>
    <div class="row">
      <div class="error-box">
        <span class="message">
          <span class="h4">!important</span>
        </span>
      </div>
    </div>

    <h5>Just don't do it.</h5>
    <p>Use greater specificity to workaround using <b>!important;</b> -- you will be judged in the afterlife</p>
  </li>
  <li>
    <h5>Use the SMACSS Approach</h5>
  </li>
</ul>

<hr>
<h2>Sass (or less or stylus, you choose)</h2>
<hr>

<ul class="vertical lined">
  <li>
    <h5>File Organization</h5>
    <ul class="bulleted">
      <li>
        Mixins and variables go in scss/global/.
      </li>
      <li>
        Styles related to components/modules/views go in sass/components/.
      </li>
      <li>
        Sass and CSS from other projects goes in sass/vendor/.
      </li>
    </ul>
  </li>
  <li>
    <h5>Main Stylesheet</h5>
    <p>All files get compiled into the main.scss stylesheet, and should be scoped accordingly.</p>
    <p>The main.scss file serves as a "table of contents" and the @import directives should be listed with vendor dependencies first, then author dependencies and core stylesheets, then components.</p>
    <p>Organize the components imports in a manner that makes sense, in other words, group components with the component they extend or inherit from.</p>
  </li>
  <li>
    <h5>Structuring Code</h5>
    <p>@extends and @includes are likely to be overwritten by future elements, placing them at the top of the property list calls them out and avoids the beginning of a specificity war.</p>

    <ul class="bulleted">
      <li>
        @extends should be grouped together at the top of the selector.
      </li>
      <li>
        @includes should be grouped together after @extends.
      </li>
      <li>
        Regular styles for the current selector should be after @includes.
      </li>
      <li>
        Nested selectors appear last.
      </li>
      <li>
        Nested selectors using & should appear above child (>) nested selectors.
      </li>
    </ul>

  </li>
  <li>
    <h5>Limit nesting to 3 levels and/or 50 lines</h5>
    <p>Nesting selectors more than three levels deep and the code is at risk of being to reliant on HTML structure, overly-specific and difficult to understand.</p>
    <p>50 lines is reasonable length for keeping an entire block on a code editor screen without having to scroll.</p>
  </li>
  <li>
    <h5>Variablize ALL THE THINGS!</h5>
    <ul class="bulleted">
      <li>
        Variablize all colors.
      </li>
      <li>
        Numbers (other than 0 or 100%) with strong meaning or frequent use should be variables.
      </li>
      <li>
        Use hyphens (-) in variable names.
      </li>
      <li>
        Name variables based on what they represent, not their values, e.g. $text-size-large instead of $text-size-24.
      </li>
      <li>
        Colors, fonts, and base measurements are all great candidates for variables.
        If you find yourself writing a number other than 0 or 100% more than once, make it a variable.
      </li>
      <li>
        Most variables should be stored in the _variables.scss partial; however, it's acceptable to define component specific variables in the component files.
      </li>
      <li>
        In this case, the variables should be stored at the top of the file.
      </li>
    </ul>
  </li>
  <li>
    <h5>Comments</h5>
    <p>Try to stick with standard CSS comments, but you can use the Sass style (//) comments for trivial comments or quickly debugging.</p>
  </li>
</ul>
